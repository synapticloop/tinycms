package com.synapticloop.tinycms.sqlite.h2zero;

// - - - - thoughtfully generated by synapticloop h2zero - - - - 
//    with the use of synapticloop templar templating language
//  (java-create-connection-manager-initialise-override.templar)


import com.mchange.v2.c3p0.ComboPooledDataSource;
import com.synapticloop.h2zero.base.manager.BaseConnectionManager;
import com.synapticloop.h2zero.base.manager.sqlite3.ConnectionManager;
import com.synapticloop.tinycms.sqlite.h2zero.ConnectionManagerInitialiser;
import com.synapticloop.tinycms.sqlite.h2zero.counter.CollectionCounter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.beans.PropertyVetoException;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

/**
 * <p>
 * This file is used to override the default initialisation of the connection
 * pool, so that you can initialise your connection by your own methods.
 * </p>
 *
 * <p>
 * Example, commented-out code is included within the method.
 * </p>
 *
 * <p>
 * To initialise the combo pool for use, call <br />
 * <code>ConnectionManagerInitialiserOverride.initialise()</code><br />
 * __ONCE__ upon initialisation of your application.
 * </p>
 *
 *
 * <p>
 * With multiple connection pools to multiple databases (rarely used, but
 * necessary in some instances) use the protected static field
 * <code>CONNECTION_POOL_NAME</code> inherited from the parent class.
 * </p>
 *
 * <p>
 * {@link  com.synapticloop.tinycms.sqlite.h2zero.ConnectionManagerInitialiser#CONNECTION_POOL_NAME  com.synapticloop.tinycms.sqlite.h2zero.ConnectionManagerInitialiser#CONNECTION_POOL_NAME}
 * </p>
 *
 * <pre>
 *
 * NOTE: ONCE GENERATED - THIS FILE WILL __NEVER__ BE OVER-WRITTEN BY AN h2zero
 *       RE-GENERATION.
 *
 *       THIS __WILL__ BE A PROBLEM IF h2zero UPDATES THE TEMPLATE IN FUTURE
 *       VERSIONS...
 *
 *       JUST SAYING...
 * </pre>
 */
public class ConnectionManagerInitialiserOverride extends ConnectionManagerInitialiser {
	private static final Logger LOGGER = LoggerFactory.getLogger(ConnectionManagerInitialiserOverride.class);
	private static final String DB_DRIVER_CLASS = "org.sqlite.JDBC";
	private static final String DB_NAME = "tinycms.db";

	private static final ComboPooledDataSource comboPooledDataSource = BaseConnectionManager.comboPooledDataSource;

	public static void initialise() {
		try {
			comboPooledDataSource.setDriverClass(DB_DRIVER_CLASS);
		} catch (PropertyVetoException e) { // runtime exception
			throw new RuntimeException(e);
		}
		// now we need to check for backups and whatnot

		String jdbcUrl = "jdbc:sqlite:/" + System.getProperty("user.dir") + "/" + DB_NAME;
		LOGGER.info("JDBC URL is {}", jdbcUrl);
		comboPooledDataSource.setJdbcUrl(jdbcUrl);


		vacuumDatabase();

		if (!doesDatabaseExist()) {
			createDatabase();
		}
	}

	public static void closeDatabase() {
		vacuumDatabase();
		comboPooledDataSource.close();
	}

	public static void vacuumDatabase() {
		try {
			Connection connection = ConnectionManager.getConnection();
			PreparedStatement preparedStatement = connection.prepareStatement("VACUUM");
			preparedStatement.execute();

		} catch (SQLException e) {
			// NOT much we can do
		}
	}

	private static boolean doesDatabaseExist() {
		try {
			CollectionCounter.countAll();
		} catch (SQLException ex) {
			return (false);
		}

		return (true);
	}

	private static void createDatabase() {
		try {
			Connection connection = ConnectionManager.getConnection();
			BufferedReader bufferedReader = new BufferedReader(
					new InputStreamReader(
							ConnectionManagerInitialiserOverride.class.getResourceAsStream("/create-database-sqlite3.sql")));
			String line = null;
			StringBuilder query = new StringBuilder();

			while ((line = bufferedReader.readLine()) != null) {
				if (!line.startsWith("--") && !line.trim().isEmpty()) {
					query.append(line);
				} else {
					continue;
				}

				if (line.trim().endsWith(";")) {
					// execute the query and
					if (line.trim().isEmpty()) {
						// we don't want to run an empty query
						continue;
					}
					PreparedStatement preparedStatement = connection.prepareStatement(query.toString());
					preparedStatement.execute();
					preparedStatement.close();
					query.setLength(0);
				}
			}

		} catch (IOException | SQLException e) {
			// TODO - this is going to be a problem
			e.printStackTrace();
		}
	}

}
