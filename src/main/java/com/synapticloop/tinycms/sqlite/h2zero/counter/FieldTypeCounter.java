package com.synapticloop.tinycms.sqlite.h2zero.counter;

// - - - - thoughtfully generated by synapticloop h2zero - - - - 
//    with the use of synapticloop templar templating language
//                (java-create-counter.templar)

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import java.sql.*;

import com.synapticloop.h2zero.base.manager.sqlite3.ConnectionManager;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


import com.synapticloop.tinycms.sqlite.h2zero.model.util.Constants;

public class FieldTypeCounter {
	// the binder is unused in code, but will generate compile problems if this 
	// class is no longer referenced in the h2zero file. Just a nicety for
	// removing dead code
	@SuppressWarnings("unused")
	private static final String BINDER = Constants.FIELD_TYPE_BINDER;

		private static final Logger LOGGER = LoggerFactory.getLogger(FieldTypeCounter.class);


	private static final String SQL_BUILTIN_COUNT_ALL = "select count(*) from field_type";



	private FieldTypeCounter() {}

	/**
	 * Find the count of all FieldType objects
	 * 
	 * @param connection the passed in connection object, useful for queries within
	 * a transaction.
	 * 
	 * @return the count of FieldType objects
	 * 
	 * @throws SQLException if there was an error in the SQL statement
	 */
	public static int countAll(Connection connection) throws SQLException {
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;

		try {
			preparedStatement = connection.prepareStatement(SQL_BUILTIN_COUNT_ALL);
			resultSet = preparedStatement.executeQuery();
			if(resultSet.next()) {
				return(resultSet.getInt(1));
			}
		} catch(SQLException sqlex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("SQLException countAll(connection): " + sqlex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					sqlex.printStackTrace();
				}
			}
			throw sqlex;
		} finally {
			ConnectionManager.closeAll(resultSet, preparedStatement);
		}

		return(-1);
	}

	/**
	 * Find the count of all FieldType objects
	 * 
	 * @return the count of FieldType objects
	 * 
	 * @throws SQLException if there was an error in the SQL statement
	 */
	public static int countAll() throws SQLException {

		try (Connection connection = ConnectionManager.getConnection()) {
			return(countAll(connection));
		} catch(SQLException sqlex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("SQLException countAll(): " + sqlex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					sqlex.printStackTrace();
				}
			}
			throw sqlex;
		}
	}

	/**
	 * Find the count of all FieldType objects and if there is an error
	 * fail silently and log the error.
	 * 
	 * @param connection the passed in connection object, useful for queries within
	 * a transaction.
	 * 
	 * @return the count of FieldType objects
	 * 
	 */
	public static int countAllSilent(Connection connection) {
		try {
			return(countAll(connection));
		} catch(SQLException sqlex){
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("SQLException countAllSilent(connection): " + sqlex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					sqlex.printStackTrace();
				}
			}
			return(-1);
		}
	}

	/**
	 * Find the count of all FieldType objects and if there is an error
	 * fail silently and log the error.
	 * 
	 * @return the count of FieldType objects
	 * 
	 */
	public static int countAllSilent() {
		try {
			return(countAll());
		} catch(SQLException sqlex){
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("SQLException countAllSilent(): " + sqlex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					sqlex.printStackTrace();
				}
			}
			return(-1);
		}
	}

}