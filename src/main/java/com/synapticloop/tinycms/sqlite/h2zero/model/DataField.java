package com.synapticloop.tinycms.sqlite.h2zero.model;

// - - - - thoughtfully generated by synapticloop h2zero - - - - 
//    with the use of synapticloop templar templating language
//                  (java-create-model.templar)

import com.synapticloop.h2zero.base.manager.sqlite3.ConnectionManager;
import com.synapticloop.h2zero.base.validator.bean.ValidationBean;
import com.synapticloop.h2zero.base.validator.bean.ValidationFieldBean;
import com.synapticloop.tinycms.sqlite.h2zero.question.FieldQuestion;
import com.synapticloop.h2zero.base.validator.*;
import com.synapticloop.h2zero.base.model.sqlite3.ModelBase;
import com.synapticloop.h2zero.base.exception.H2ZeroPrimaryKeyException;
import com.synapticloop.h2zero.base.exception.H2ZeroFinderException;
import java.lang.StringBuilder;
import java.sql.Connection;
import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import org.json.JSONObject;
import com.synapticloop.h2zero.util.XmlHelper;

import com.synapticloop.h2zero.base.model.ModelBaseHelper;
import com.synapticloop.tinycms.sqlite.h2zero.model.util.Constants;

import com.synapticloop.tinycms.sqlite.h2zero.finder.DataFieldFinder;
import com.synapticloop.tinycms.sqlite.h2zero.finder.FieldFinder;


/**
 * <p>This is the model for the <code>DataField</code> which maps to the <code>data_field</code> database table.</p>
 * <p>This class contains all CRUD (Create, Read, Update, and Delete) methods.</p>
  * 
 * @author synapticloop h2zero
 * 
 * <p>@see <a href="https://github.com/synapticloop/h2zero">Synapticloop h2zero GitHub repository</a></p>
 */
public class DataField extends ModelBase {
	// the binder is unused in code, but will generate compile problems if this 
	// class is no longer referenced in the h2zero file. Just a nicety for
	// removing dead code
	@SuppressWarnings("unused")
	private static final String BINDER = Constants.DATA_FIELD_BINDER;


	public static final String PRIMARY_KEY_FIELD = "id_data_field";  // the primary key - a convenience field

	private static final String SQL_INSERT = 
		"""
			insert into
			data_field (
				id_field
			) values (
				?
			)
		""";
	private static final String SQL_UPDATE = 
		"""
			update
				data_field
			set
				id_field = ?
			where
		"""
			+ PRIMARY_KEY_FIELD + 
		"""
			= ?
		""";
	private static final String SQL_DELETE = "delete from data_field where " + PRIMARY_KEY_FIELD + " = ?";
	private static final String SQL_ENSURE = "select " + PRIMARY_KEY_FIELD + " from data_field where id_field = ?";


	// Static lookups for fields in the hit counter.
	// Whilst these aren't used internally (the offset to the array is 
	// automatically computer, external classes can use these static fields 
	// to look up the hit counts in the array 
	public static final int HIT_TOTAL = 0;
	public static final int HIT_ID_DATA_FIELD = 1;
	public static final int HIT_ID_FIELD = 2;


	// the list of fields for the hit - starting with 'TOTAL'
	private static final String[] HIT_FIELDS = { "TOTAL", "id_data_field", "id_field" };
	// the number of read-hits for a particular field
	private static final int[] HIT_COUNTS = { 0, 0, 0 };

	private Field Field = null; // maps to the id_field field

	private Long idDataField = null; // maps to the id_data_field field
	private Long idField = null; // maps to the id_field field

	public DataField(Long idDataField, Long idField) {
		this.idDataField = idDataField;
		this.idField = idField;
	}

	/**
	 * <p>Get a new DataField model, or set the fields on an existing
	 * DataField model.</p>
	 * 
	 * <p>If the passed in dataField is null, then a new DataField
	 * will be created.  If not null, the fields will be updated on the passed in model.</p>
	 * 
	 * <p><strong>NOTE:</strong> You will still need to persist this to the database
	 * with an <code>upsert()</code> call - this will insert the model if it .
	 * doesn't exist, or update the existing model.</p>
	 * 
	 * @param dataField the model to check
	 * @param idField - maps to the <code>id_field</code> field.
	 * 
	 * @return Either the existing dataField with updated field values,
	 *   or a new DataField with the field values set.
	 */
	public static DataField getOrSet(DataField dataField,Long idField) {
		if(null == dataField) {
			return (new DataField(null, idField));
		} else {
			dataField.setIdField(idField);

			return(dataField);
		}
	}

	@Override
	public boolean primaryKeySet() {
		return(null != idDataField);
	}


	@Override
	public void insert(Connection connection) throws SQLException, H2ZeroPrimaryKeyException {
		if(primaryKeySet()) {
			throw new H2ZeroPrimaryKeyException("Cannot insert data_field model when primary key is not null.");
		}

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {
			// create this bean 
			preparedStatement = connection.prepareStatement(SQL_INSERT, Statement.RETURN_GENERATED_KEYS);
			ConnectionManager.setBigint(preparedStatement, 1, idField);
			preparedStatement.executeUpdate();
			resultSet = preparedStatement.getGeneratedKeys();
			if(resultSet.next()) {
				this.idDataField = resultSet.getLong(1);
			} else {
				throw new H2ZeroPrimaryKeyException("Could not get return value for primary key!");
			}
		} finally {
			ConnectionManager.closeAll(resultSet, preparedStatement);
		}
	}

	@Override
	public void ensure(Connection connection) throws SQLException, H2ZeroPrimaryKeyException {

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {
			preparedStatement = connection.prepareStatement(SQL_ENSURE);
			ConnectionManager.setBigint(preparedStatement, 1, idField);
			resultSet = preparedStatement.executeQuery();
			if(resultSet.next()) {
				this.idDataField = resultSet.getLong(1);
			} else {
				// could not find the value - need to insert it - null is the primary key
				insert(connection);
			}
		} finally {
			ConnectionManager.closeAll(resultSet, preparedStatement);
		}
	}

	@Override
	public void update(Connection connection) throws SQLException, H2ZeroPrimaryKeyException {
		if(!primaryKeySet()) {
			throw new H2ZeroPrimaryKeyException("Cannot update bean when primary key is null.");
		}

		if(isDirty) {
			try (PreparedStatement preparedStatement = connection.prepareStatement(SQL_UPDATE)) {
				// update this bean, but only if dirty
				ConnectionManager.setBigint(preparedStatement, 1, idField);
				// now set the primary key
				preparedStatement.setLong(2, idDataField);
				preparedStatement.executeUpdate();
			} finally {
				isDirty = false;
			}
		}
	}

	@Override
	public void delete(Connection connection) throws SQLException, H2ZeroPrimaryKeyException {
		if(!primaryKeySet()) {
			throw new H2ZeroPrimaryKeyException("Cannot delete bean when primary key is null.");
		}
		try (PreparedStatement preparedStatement = connection.prepareStatement(SQL_DELETE)) {
			preparedStatement.setLong(1, idDataField);
			preparedStatement.executeUpdate();
		}
	}

	@Override
	public void refresh(Connection connection) throws SQLException, H2ZeroPrimaryKeyException, H2ZeroFinderException {
		if(!primaryKeySet()) {
			throw new H2ZeroPrimaryKeyException("Cannot refresh model 'DataField' when primary key is null.");
		}

		DataField dataField = DataFieldFinder.findByPrimaryKeySilent(connection, this.idDataField);
		if(null == dataField) {
			throw new H2ZeroFinderException("Could not find the model 'DataField' with primaryKey of " + getPrimaryKey());
		}
		this.idDataField = dataField.getIdDataField();
		this.idField = dataField.getIdField();
		this.Field = null;
	}

	public static String[] getHitFields() { return(HIT_FIELDS); }
	public static int[] getHitCounts() { return(HIT_COUNTS); }

	/**
	 * Get the hit count for a specific field - look at the <code>public static HIT_*</code>
	 * fields to retrieve a specific field.
	 *
	 * @param hitCountField the hit count field number to retrieve the hit count from
	 *
	 * @return the hit count for the field
	 * 
	 * <p>{@link #HIT_ID_DATA_FIELD Use <code>DataField.HIT_ID_DATA_FIELD</code> to retrieve the hit count for the <code>id_data_field</code> field}</p>
	 * <p>{@link #HIT_ID_FIELD Use <code>DataField.HIT_ID_FIELD</code> to retrieve the hit count for the <code>id_field</code> field}</p>

	 */
	public static int getHitCountForField(int hitCountField) { return(HIT_COUNTS[hitCountField]); }

	public Field getField() {
		if(null == this.Field) {
			this.Field = FieldFinder.findByPrimaryKeySilent(this.idField);
		}
		return(this.Field);
	}

	public static void updateHitCount(int offset) {
		HIT_COUNTS[0]++;
		HIT_COUNTS[offset]++;
	}

	/*
	 * Boring ol' getters and setters 
	 * 
	 * On setting any of these fields - the 'isDirty' flag will be set
	 * 
	 */

	public Long getPrimaryKey() { updateHitCount(1); return(this.idDataField); }
	public void setPrimaryKey(Long idDataField) { if(isDifferent(this.idDataField, idDataField)) { this.idDataField = idDataField;this.isDirty = true; }}
	public Long getIdDataField() { updateHitCount(1); return(this.idDataField); }
	public void setIdDataField(Long idDataField) { if(isDifferent(this.idDataField, idDataField)) { this.idDataField = idDataField;this.isDirty = true; }}
	public Long getIdField() { updateHitCount(2); return(this.idField); }
	public void setIdField(Long idField) { if(isDifferent(this.idField, idField)) { this.idField = idField;this.isDirty = true; this.Field = null;}}

	@Override
	public ValidationBean validate() {
		ValidationBean validationBean = new ValidationBean();

		ValidationFieldBean idFieldValidationFieldBean = new BigintValidator("id_field", idField.toString(), 0, 0, false).validate();
		idFieldValidationFieldBean.setIsIncorrectForeignKey(!FieldQuestion.internalDoesPrimaryKeyExist(idField));
		validationBean.addValidationFieldBean(idFieldValidationFieldBean);

		return(validationBean);
	}


	@Override
	public String toString() {
		return(
			"{\"DataField\": {" +
			"\"idDataField\":\"" + this.idDataField + "\"" +
			"\"idField\":\"" + this.idField + "\"" +
			"}");
	}
	public JSONObject getToJSON() {
		return(toJSON());
	}

	public JSONObject toJSON() {
		JSONObject jsonObject = new JSONObject();

		jsonObject.put("type", "table");
		jsonObject.put("name", "DataField");
		JSONObject fieldsObject = new JSONObject();

		ModelBaseHelper.addtoJSONObject(fieldsObject, "idDataField", this.getIdDataField());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "idField", this.getIdField());

		jsonObject.put("fields", fieldsObject);

		return(jsonObject);
	}


	public String toJsonString() {
		return(toJSON().toString());
	}

	public String getJsonString() {
		return(toJsonString());
	}

	/**
	 * <p>Return an XML representation of the <code>DataField</code> model as a <code>String</code>, 
	 * with the root node being the name of the table - i.e. <code>&lt;data_field /&gt;</code> 
	 * and the child nodes the name of the fields.</p>
	 * 
	 * <p><strong>NOTE:</strong> Any field marked as secure will not be included as
	 * part of the XML document</p>
	 * 
	 * @return An XML representation of the model as a <code>String</code>.
	 */
	public String toXMLString() {
		return("<data_field>" + 
			String.format("<id_data_field null=\"%b\">%s</id_data_field>", (this.getIdDataField() == null), (this.getIdDataField() != null ? this.getIdDataField() : "")) + 
			String.format("<id_field null=\"%b\">%s</id_field>", (this.getIdField() == null), (this.getIdField() != null ? this.getIdField() : "")) + 
			"</data_field>");
	}


	/**
	 * Get the hit count statistics as a JSON encoded object as a <code>String</code>.
	 *
	 * @return the JSON Object as a <code>String</code>.
	 */
	public static String getHitCountJson() {
		JSONObject jsonObject = new JSONObject();
		jsonObject.put("type", "DataField");
		jsonObject.put("total", HIT_COUNTS[0]);
		jsonObject.put("idDataField", HIT_COUNTS[1]);
		jsonObject.put("idField", HIT_COUNTS[2]);
		return(jsonObject.toString());
	}

}